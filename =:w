package main

import (
	"bufio"
	"fmt"
	"log"
	"os"

	"github.com/harrisja-jacob/advent-2022/utils"
)

func main() {
	file, err := os.Open("./input/day17.in")

	if err != nil {
		log.Fatal(err)
	}

	defer file.Close()

	scanner := utils.ScannerFromStart(file)

	fmt.Println(partOne(scanner))

	scanner = utils.ScannerFromStart(file)

	fmt.Println(partTwo(scanner))
}

func partOne(scanner *bufio.Scanner) string {

    pattern := readPattern(scanner)
    rocks := make(map[[2]int]bool, 0)
    i := 0

    for rock := 0; rock <= 2022; rock++ {
        fallingRock := getRockShape(rock%5, 3)
            printRock(rockShape, 3)

            for {
                // move sideways
                if pattern[i] == '>' {
                    moveLeft(fallingRock)
                } else {
                    moveRight(fallingRock)
                }

                // move down
                moveDown(fallingRock, rocks)

                i = (i + 1) % len(pattern)

            }
    }

    return "NOT IMPLEMENTED"
}

func partTwo(scanner *bufio.Scanner) string {

	return "NOT IMPLEMENTED"
}


func readPattern(scanner *bufio.Scanner) string {
    scanner.Scan()
    return scanner.Text()
}

func printRock(rock map[[2]int]bool, Y int) {
    for y := Y; y >= Y-5; y-- {
        for x := 0; x < 7; x++ {
            if rock[[2]int{x, y}] {
                fmt.Print("#")
            } else {
                fmt.Print(".")
            }
        }
        fmt.Println()
    }
}




// ####

// .#.
// ###
// .#.

// ..#
// ..#
// ###

// #
// #
// #
// #

// ##
// ##
func getRockShape(rockNumber int, Y int) map[[2]int]bool {
    switch rockNumber {
        case 0:
            rock := make(map[[2]int]bool)
            rock[[2]int{2, Y}] = true
            rock[[2]int{3, Y}] = true
            rock[[2]int{4, Y}] = true
            rock[[2]int{5, Y}] = true

            return rock

        case 1:
            rock := make(map[[2]int]bool)
            rock[[2]int{3, Y}] = true
            rock[[2]int{2, Y-1}] = true
            rock[[2]int{3, Y-1}] = true
            rock[[2]int{4, Y-1}] = true
            rock[[2]int{3, Y-2}] = true

            return rock
        case 2:
            rock := make(map[[2]int]bool)
            rock[[2]int{4, Y}] = true
            rock[[2]int{4, Y-1}] = true
            rock[[2]int{4, Y-2}] = true
            rock[[2]int{3, Y-2}] = true
            rock[[2]int{2, Y-2}] = true

            return rock

        case 3:
            rock := make(map[[2]int]bool)
            rock[[2]int{2, Y}] = true
            rock[[2]int{2, Y-1}] = true
            rock[[2]int{2, Y-2}] = true
            rock[[2]int{2, Y-3}] = true

            return rock

        default:
            rock := make(map[[2]int]bool)
            rock[[2]int{2, Y}] = true
            rock[[2]int{3, Y}] = true
            rock[[2]int{2, Y-1}] = true
            rock[[2]int{3, Y-1}] = true

            return rock

   }
}


